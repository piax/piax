/* Generated By:JJTree&JavaCC: Do not edit this line. DCLParserConstants.java */
package org.piax.common.dcl.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface DCLParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_LINE = 1;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 2;
  /** RegularExpression Id. */
  int LPAR = 8;
  /** RegularExpression Id. */
  int RPAR = 9;
  /** RegularExpression Id. */
  int LBRA = 10;
  /** RegularExpression Id. */
  int RBRA = 11;
  /** RegularExpression Id. */
  int LBRACE = 12;
  /** RegularExpression Id. */
  int RBRACE = 13;
  /** RegularExpression Id. */
  int COMMA = 14;
  /** RegularExpression Id. */
  int BETWEEN = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int EQ = 17;
  /** RegularExpression Id. */
  int IN = 18;
  /** RegularExpression Id. */
  int OVERLAPS = 19;
  /** RegularExpression Id. */
  int INCLUDES = 20;
  /** RegularExpression Id. */
  int PLUS = 21;
  /** RegularExpression Id. */
  int MINUS = 22;
  /** RegularExpression Id. */
  int MULTIPLY = 23;
  /** RegularExpression Id. */
  int DIVIDE = 24;
  /** RegularExpression Id. */
  int MOD = 25;
  /** RegularExpression Id. */
  int INTEGER = 26;
  /** RegularExpression Id. */
  int DECIMAL = 27;
  /** RegularExpression Id. */
  int HEX = 28;
  /** RegularExpression Id. */
  int BINARY = 29;
  /** RegularExpression Id. */
  int FLOATING_POINT = 30;
  /** RegularExpression Id. */
  int EXPONENT = 31;
  /** RegularExpression Id. */
  int STRING = 32;
  /** RegularExpression Id. */
  int IDENTIFIER = 33;
  /** RegularExpression Id. */
  int LETTER = 34;
  /** RegularExpression Id. */
  int DIGIT = 35;
  /** RegularExpression Id. */
  int DOT = 36;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<COMMENT_LINE>",
    "<COMMENT_BLOCK>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\"..\"",
    "\"and\"",
    "\"eq\"",
    "\"in\"",
    "\"overlaps\"",
    "\"includes\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "<INTEGER>",
    "<DECIMAL>",
    "<HEX>",
    "<BINARY>",
    "<FLOATING_POINT>",
    "<EXPONENT>",
    "<STRING>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\".\"",
  };

}
