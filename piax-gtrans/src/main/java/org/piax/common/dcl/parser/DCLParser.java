/* Generated By:JJTree&JavaCC: Do not edit this line. DCLParser.java */
package org.piax.common.dcl.parser;
import org.piax.common.dcl.DCLFactory;
import org.piax.common.dcl.DCLTranslator;

@SuppressWarnings("all")
public class DCLParser/*@bgen(jjtree)*/implements DCLParserTreeConstants, DCLParserConstants {/*@bgen(jjtree)*/
  protected JJTDCLParserState jjtree = new JJTDCLParserState();public static void main(String args [])
  {
    System.out.println("Reading from standard input...");
    System.out.print("Enter an condition like \u005c"age in (0..20]\u005c" :");
    DCLParser parser = new DCLParser(System.in);
    try
    {
      SimpleNode n = parser.StartDCL();
      Object exp = n.jjtAccept(new DCLTranslator(), null);
      System.out.println("exp: " + ((DCLFactory) exp).getDstCond());
      n.dump("");
      System.out.println("--end--");
    }
    catch (Exception e)
    {
      System.out.println("Oops.");
      System.out.println(e);
    }
  }

/*
   examples:
   - loc in circle(135.0, 35.0, 5.0) and age in [20..)
   - name in {Taro, Hanako, Jiro}
   - plot in {1, 3, (6..10]}
*/

// start parsing of Destination
  final public SimpleNode StartDestination() throws ParseException {
 /*@bgen(jjtree) StartDestination */
  DCL_StartDestination jjtn000 = new DCL_StartDestination(JJTSTARTDESTINATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Destination();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Destination() throws ParseException {
 /*@bgen(jjtree) Destination */
 DCL_Destination jjtn000 = new DCL_Destination(JJTDESTINATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      if (jj_2_1(2)) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQ:
          t = jj_consume_token(EQ);
          break;
        default:
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case INTEGER:
        case FLOATING_POINT:
        case STRING:
          element();
          break;
        case IDENTIFIER:
          BuiltinFunc();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LBRA:
        case LBRACE:
        case IN:
        case OVERLAPS:
        case INCLUDES:
        case IDENTIFIER:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IN:
          case OVERLAPS:
          case INCLUDES:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case IN:
              t = jj_consume_token(IN);
              break;
            case OVERLAPS:
              t = jj_consume_token(OVERLAPS);
              break;
            case INCLUDES:
              t = jj_consume_token(INCLUDES);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case LPAR:
          case LBRA:
          case LBRACE:
            subset();
            break;
          case IDENTIFIER:
            BuiltinFunc();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue((t == null) ? null : t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

// start parsing of DCL
  final public SimpleNode StartDCL() throws ParseException {
 /*@bgen(jjtree) StartDCL */
  DCL_StartDCL jjtn000 = new DCL_StartDCL(JJTSTARTDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndCondition();
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void AndCondition() throws ParseException {
 /*@bgen(jjtree) AndCondition */
  DCL_AndCondition jjtn000 = new DCL_AndCondition(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Predicate();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AND:
          ;
          break;
        default:
          break label_1;
        }
        jj_consume_token(AND);
        Predicate();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Predicate() throws ParseException {
 /*@bgen(jjtree) Predicate */
 DCL_Predicate jjtn000 = new DCL_Predicate(JJTPREDICATE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      Var();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        t = jj_consume_token(EQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
        case INTEGER:
        case FLOATING_POINT:
        case STRING:
          element();
          break;
        case IDENTIFIER:
          BuiltinFunc();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case IN:
      case OVERLAPS:
      case INCLUDES:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IN:
          t = jj_consume_token(IN);
          break;
        case OVERLAPS:
          t = jj_consume_token(OVERLAPS);
          break;
        case INCLUDES:
          t = jj_consume_token(INCLUDES);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LPAR:
        case LBRA:
        case LBRACE:
          subset();
          break;
        case IDENTIFIER:
          BuiltinFunc();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Var() throws ParseException {
 /*@bgen(jjtree) Var */
 DCL_Var jjtn000 = new DCL_Var(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void exp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
    case INTEGER:
    case FLOATING_POINT:
    case STRING:
      element();
      break;
    case LPAR:
    case LBRA:
    case LBRACE:
      subset();
      break;
    case IDENTIFIER:
      BuiltinFunc();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void subset() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LBRACE:
      Enumeration();
      break;
    case LPAR:
    case LBRA:
      Interval();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Enumeration() throws ParseException {
 /*@bgen(jjtree) Enumeration */
  DCL_Enumeration jjtn000 = new DCL_Enumeration(JJTENUMERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(LBRACE);
      exp();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          break label_2;
        }
        jj_consume_token(COMMA);
        exp();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Interval() throws ParseException {
 /*@bgen(jjtree) Interval */
 DCL_Interval jjtn000 = new DCL_Interval(JJTINTERVAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t1, t2;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        t1 = jj_consume_token(LPAR);
        break;
      case LBRA:
        t1 = jj_consume_token(LBRA);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LBRA:
      case LBRACE:
      case MINUS:
      case INTEGER:
      case FLOATING_POINT:
      case STRING:
      case IDENTIFIER:
        exp();
        break;
      default:
        ;
      }
      Between();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
      case LBRA:
      case LBRACE:
      case MINUS:
      case INTEGER:
      case FLOATING_POINT:
      case STRING:
      case IDENTIFIER:
        exp();
        break;
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RPAR:
        t2 = jj_consume_token(RPAR);
        break;
      case RBRA:
        t2 = jj_consume_token(RBRA);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t1.image+t2.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Between() throws ParseException {
 /*@bgen(jjtree) Between */
  DCL_Between jjtn000 = new DCL_Between(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BETWEEN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BuiltinFunc() throws ParseException {
 /*@bgen(jjtree) BuiltinFunc */
 DCL_BuiltinFunc jjtn000 = new DCL_BuiltinFunc(JJTBUILTINFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAR:
        jj_consume_token(LPAR);
        exp();
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          exp();
        }
        jj_consume_token(RPAR);
        break;
      default:
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void element() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
    case FLOATING_POINT:
      Number();
      break;
    case MINUS:
      MinusNumber();
      break;
    case STRING:
      String();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void MinusNumber() throws ParseException {
 /*@bgen(jjtree) MinusNumber */
  DCL_MinusNumber jjtn000 = new DCL_MinusNumber(JJTMINUSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(MINUS);
      Number();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Number() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      Integer();
      break;
    case FLOATING_POINT:
      Floating();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void Integer() throws ParseException {
 /*@bgen(jjtree) Integer */
 DCL_Integer jjtn000 = new DCL_Integer(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INTEGER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Floating() throws ParseException {
 /*@bgen(jjtree) Floating */
 DCL_Floating jjtn000 = new DCL_Floating(JJTFLOATING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FLOATING_POINT);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void String() throws ParseException {
 /*@bgen(jjtree) String */
 DCL_String jjtn000 = new DCL_String(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(STRING);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
   jjtn000.jjtSetValue(t.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(17)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_8() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(LPAR)) return true;
    return false;
  }

  private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_scan_token(FLOATING_POINT)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_7() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) jj_scanpos = xsp;
    return false;
  }

  /** Generated Token Manager. */
  public DCLParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public DCLParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public DCLParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new DCLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public DCLParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new DCLParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public DCLParser(DCLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(DCLParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
