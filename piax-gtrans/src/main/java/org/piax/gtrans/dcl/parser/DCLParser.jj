/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. DCLParser.jj */
/*@egen*//**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */options{    JDK_VERSION = "1.5";    STATIC = false;
                                          
                   
    JAVA_UNICODE_ESCAPE = true;
    UNICODE_INPUT = true;
    ERROR_REPORTING = false;
    DEBUG_PARSER = false;
}PARSER_BEGIN(DCLParser)package org.piax.common.dcl.parser;
import org.piax.common.dcl.*;

public class DCLParser/*@bgen(jjtree)*/implements DCLParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTDCLParserState jjtree = new JJTDCLParserState();

/*@egen*/  public static void main(String args [])  {    System.out.println("Reading from standard input...");    System.out.print("Enter an condition like \"age in (0..20]\" :");    DCLParser parser = new DCLParser(System.in);    try    {      SimpleNode n = parser.StartDCL();
      Object exp = n.jjtAccept(new DCLTranslator(), null);      System.out.println("exp: " + ((DCLFactory) exp).getDstCond());
      n.dump("");      System.out.println("--end--");    }    catch (Exception e)    {
      System.out.println("Oops.");      System.out.println(e);    }  }}PARSER_END(DCLParser)// comments
SKIP: {
    <COMMENT_LINE: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}
SKIP: {
    <COMMENT_BLOCK: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

// white space 
SKIP: {
      " "
    | "\t"
    | "\n"
    | "\r"
    | "\f"
}

// separators
TOKEN :
{
  <LPAR : "(">
| <RPAR : ")">
| <LBRA : "[">
| <RBRA : "]">
| <LBRACE : "{">
| <RBRACE : "}">
| <COMMA : ",">
}

// operators
TOKEN :
{
  <BETWEEN : "..">
| <AND : "and">
| <EQ : "eq">
| <IN : "in">
| <OVERLAPS : "overlaps">
| <INCLUDES : "includes">
}

// arithmetic operators
TOKEN :
{
  <PLUS : "+">
| <MINUS : "-">
| <MULTIPLY : "*">
| <DIVIDE : "/">
| <MOD : "%">
}

// numeric literals
TOKEN: {
  <INTEGER:
        <DECIMAL> (["l","L","g","G"])?
      | <HEX> (["l","L","g","G"])?
      | <BINARY> (["l","L","g","G"])?
  >
|
  <#DECIMAL: ["0"-"9"] (("_")? ["0"-"9"])*>
|
  <#HEX: "0" ["x","X"] ["0"-"9","a"-"f","A"-"F"] (("_")? ["0"-"9","a"-"f","A"-"F"])*>
|
  <#BINARY: "0" ["b","B"] ["0","1"] (("_")? ["0","1"])*> 
|
  <FLOATING_POINT:
        (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  <#EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+>
}

// string literals
TOKEN :
{
  <STRING :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | "u" ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
          ["0"-"9","a"-"f","A"-"F"] ["0"-"9","a"-"f","A"-"F"]
        )
      )
    )*
    "\"">
}

// identifiers
TOKEN :
{
  <IDENTIFIER :
    <LETTER>
    (
      (<DOT>)?
      (
        <LETTER>
      | <DIGIT>
      )
    )*
    >
| <#LETTER : [ "$", "A"-"Z", "_", "a"-"z" ]>
| <#DIGIT : [ "0"-"9" ]>
| <#DOT : ".">
}

/*
   examples:
   - loc in circle(135.0, 35.0, 5.0) and age in [20..)
   - name in {Taro, Hanako, Jiro}
   - plot in {1, 3, (6..10]}
*/

// start parsing of Destination
SimpleNode StartDestination() :
{/*@bgen(jjtree) StartDestination */
  DCL_StartDestination jjtn000 = new DCL_StartDestination(JJTSTARTDESTINATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartDestination */
  try {
/*@egen*/
  Destination()
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Destination() :
{/*@bgen(jjtree) Destination */
 DCL_Destination jjtn000 = new DCL_Destination(JJTDESTINATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;}
{/*@bgen(jjtree) Destination */
  try {
/*@egen*/
  ( 
  LOOKAHEAD(2)
    [ t = <EQ> ]
    (
      element()
    | BuiltinFunc()
    )
  | 
    [  t = <IN> 
      | t = <OVERLAPS>
      | t = <INCLUDES>
    ]
    (
      subset()
    | BuiltinFunc()
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue((t == null) ? null : t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// start parsing of DCL
SimpleNode StartDCL() :
{/*@bgen(jjtree) StartDCL */
  DCL_StartDCL jjtn000 = new DCL_StartDCL(JJTSTARTDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) StartDCL */
  try {
/*@egen*/
  AndCondition()
  <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AndCondition() :
{/*@bgen(jjtree) AndCondition */
  DCL_AndCondition jjtn000 = new DCL_AndCondition(JJTANDCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndCondition */
  try {
/*@egen*/
  Predicate()
  (
    <AND> Predicate()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Predicate() :
{/*@bgen(jjtree) Predicate */
 DCL_Predicate jjtn000 = new DCL_Predicate(JJTPREDICATE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Predicate */
  try {
/*@egen*/
  Var() 
  ( 
    t = <EQ> 
    (
      element()
    | BuiltinFunc()
    )
  | ( 
      t = <IN> 
    | t = <OVERLAPS>
    | t = <INCLUDES>
    ) 
    (
      subset()
    | BuiltinFunc()
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Var() :
{/*@bgen(jjtree) Var */
 DCL_Var jjtn000 = new DCL_Var(JJTVAR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Var */
  try {
/*@egen*/
  t = <IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void exp()       :
{}
{
//  LOOKAHEAD(2)
  element()
| subset()
| BuiltinFunc()
}

void subset()       :
{}
{
  Enumeration()
| Interval()
}

void Enumeration() :
{/*@bgen(jjtree) Enumeration */
  DCL_Enumeration jjtn000 = new DCL_Enumeration(JJTENUMERATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Enumeration */
  try {
/*@egen*/
  <LBRACE> exp()
  (
    <COMMA> exp()
  )*
  <RBRACE>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Interval() :
{/*@bgen(jjtree) Interval */
 DCL_Interval jjtn000 = new DCL_Interval(JJTINTERVAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Interval */
  try {
/*@egen*/
  (
    t1 = <LPAR>
  | t1 = <LBRA>
  )
  [ exp() ] Between() [ exp() ]
  (
    t2 = <RPAR>
  | t2 = <RBRA>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t1.image+t2.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Between() :
{/*@bgen(jjtree) Between */
  DCL_Between jjtn000 = new DCL_Between(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Between */
  try {
/*@egen*/
  <BETWEEN>/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BuiltinFunc() :
{/*@bgen(jjtree) BuiltinFunc */
 DCL_BuiltinFunc jjtn000 = new DCL_BuiltinFunc(JJTBUILTINFUNC);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) BuiltinFunc */
  try {
/*@egen*/
  t = <IDENTIFIER>
  [ <LPAR>
    exp()
    (
      <COMMA> exp()
    )*
    <RPAR>
  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void element()       :
{}
{
  Number()
| MinusNumber()
| String()
//| Constant()
}

void MinusNumber() :
{/*@bgen(jjtree) MinusNumber */
  DCL_MinusNumber jjtn000 = new DCL_MinusNumber(JJTMINUSNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) MinusNumber */
  try {
/*@egen*/
  <MINUS>
  Number()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Number()       :
{}
{
  (
    Integer()
  | Floating()
  )
}

void Integer() :
{/*@bgen(jjtree) Integer */
 DCL_Integer jjtn000 = new DCL_Integer(JJTINTEGER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t= <INTEGER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Floating() :
{/*@bgen(jjtree) Floating */
 DCL_Floating jjtn000 = new DCL_Floating(JJTFLOATING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Floating */
  try {
/*@egen*/
  t= <FLOATING_POINT>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void String() :
{/*@bgen(jjtree) String */
 DCL_String jjtn000 = new DCL_String(JJTSTRING);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t = <STRING>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

// constant treated as 0-arity builtin function
//void Constant() ://{Token t;}//{//  t = <IDENTIFIER>//  {jjtThis.jjtSetValue(t.image);}//}
